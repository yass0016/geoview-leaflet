{"version":3,"file":"corePackages/geoview-overview-map.js","mappings":"2NAOQA,EAHEC,OAGFD,KAGAE,EAA+CF,EAA/CE,IAAKC,EAA0CH,EAA1CG,MAAOC,EAAmCJ,EAAnCI,aAAcC,EAAqBL,EAArBK,iBAG5BC,EAAcJ,EAAIK,WAGhBC,EAA8CL,EAA9CK,SAAUC,EAAoCN,EAApCM,UAAWC,EAAyBP,EAAzBO,YAAaC,EAAYR,EAAZQ,QAGlCC,EAAgBR,EAAhBQ,YAGAC,EAAqBR,EAArBQ,iBAgBD,SAASC,EAAcC,GAC5B,IAAQC,EAA6CD,EAA7CC,SAAUC,EAAmCF,EAAnCE,UAAWC,EAAwBH,EAAxBG,WAAYC,EAAYJ,EAAZI,QAEzC,EAA4BX,GAAS,GAArC,eAAOY,EAAP,KAAeC,EAAf,KAGMC,EAAUZ,GACd,SAACa,GACCN,EAAUO,QAAQD,EAAEE,OAAQR,EAAUS,aAExC,CAACT,IAEHL,EAAY,QAASU,GAGrB,MAA4Bd,EAAS,CACnCmB,OAAQ,EACRC,MAAO,EACPC,IAAK,EACLC,KAAM,IAJR,eAAOC,EAAP,KAAeC,EAAf,KAQA,SAASC,IAEP,GAAIC,OAAOC,KAAKhB,EAAQiB,YAAYC,OAAQ,CAC1C,IAAMC,EAAUrB,EAAUS,UAAYR,EAAa,EAAID,EAAUS,UAAYR,EAAa,EAE1FC,EAAQoB,MAAMtB,EAAUuB,YAAaF,GAGrCG,YAAW,WAET,GAAIP,OAAOC,KAAKhB,EAAQiB,YAAYC,OAAQ,CAC1ClB,EAAQuB,iBACR,IAAMC,EAAOxB,EAAQyB,uBAAuB3B,EAAU4B,YAAYC,gBAC5DC,EAAO5B,EAAQyB,uBAAuB3B,EAAU4B,YAAYG,gBAClEhB,EAAU,CACRL,OAAQgB,EAAKM,EAAIF,EAAKE,EACtBrB,MAAOmB,EAAKG,EAAIP,EAAKO,EACrBrB,IAAKkB,EAAKE,EACVnB,KAAMa,EAAKO,OAGd,MAIPzC,GAAU,WAkBR,OAjBAwB,IAGA/B,EAAIiD,MAAMC,GACR9C,EAAY+C,aAAaC,2BACzB,SAACC,IACKC,EAAAA,EAAAA,IAAkBD,IAChBvC,IAAauC,EAAQE,cACvBxB,IACAZ,EAAUkC,EAAQG,WAIxB1C,GAIK,WACLd,EAAIiD,MAAMQ,IAAIrD,EAAY+C,aAAaC,0BAA2BtC,MAGnE,IAEH,IAAM4C,EAAWlD,GAAY,WAC3BuB,MAEC,CAACd,EAASF,EAAWC,IAGlB2C,EAAWlD,GAAQ,iBAAO,CAAEmD,QAASF,EAAUG,QAASH,KAAa,CAACA,IAQ5E,OAFA/C,EAJuB,CACrBmD,SAAU/C,EACVgD,QAHc,CAAEC,UAAW,EAAGC,IAAKlD,IAKJ4C,GAEzBzC,GAgBN,oBAfA,gBACEgD,MAAO,CACLtC,KAAM,GAAF,OAAKC,EAAOD,KAAZ,MACJD,IAAK,GAAF,OAAKE,EAAOF,IAAZ,MACHD,MAAO,GAAF,OAAKG,EAAOH,MAAZ,MACLD,OAAQ,GAAF,OAAKI,EAAOJ,OAAZ,MACN0C,QAAS,QACTC,QAAS,GACTC,SAAU,WACVC,OAAQ,yBACRC,gBAAiB,qBACjBC,OAAQ,OClIhB,IAGQ1E,EAHEC,OAGFD,KAGAE,EAAuDF,EAAvDE,IAAKC,EAAkDH,EAAlDG,MAAOwE,EAA2C3E,EAA3C2E,QAASC,EAAkC5E,EAAlC4E,GAAIC,EAA8B7E,EAA9B6E,UAAWC,EAAmB9E,EAAnB8E,eAGtCxE,EAAcJ,EAAIK,WAGhBC,EAAgCL,EAAhCK,SAAUC,EAAsBN,EAAtBM,UAAWsE,EAAW5E,EAAX4E,OAGrBC,EAAaL,EAAbK,SAGR,EAAwCJ,EAAGK,SAAnCC,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,gBAGZC,EAA2BP,EAA3BO,uBAEFC,EAAYT,EAAGU,YAAW,SAACC,GAAD,MAAY,CAC1CC,UAAW,CACTC,UAAW,gBACXC,MAAOH,EAAMI,QAAQC,QAAQC,aAC7BnB,OAAQa,EAAMb,OAAOoB,QACrB,UAAW,CACTC,OAAQ,YAGZC,mBAAoB,CAClBtB,OAAQa,EAAMb,OAAOoB,SAEvBG,YAAa,CACXR,UAAW,kBAEbS,cAAe,CACbT,UAAW,sBAiBR,SAASU,EAAcpF,GAC5B,IAAQC,EAAsBD,EAAtBC,SAAUG,EAAYJ,EAAZI,QAEZiF,EAASrB,EAAuB,MAE9BsB,EAAMvB,IAANuB,EAER,EAA4B7F,GAAS,GAArC,eAAOkD,EAAP,KAAe4C,EAAf,KAEMC,EAAUlB,IAEVE,EAAQX,EAAG4B,WA4BjB,OAJA/F,GAAU,WACRuE,EAASyB,wBAAwBL,EAAOM,WACvC,KAGD,gBAAKC,IAAKP,EAAQQ,UAAS,UAAKxB,EAAuByB,SAA5B,YAAwCN,EAAQP,oBAA3E,UACE,SAACd,EAAD,CACE0B,UAAS,0BAAqBL,EAAQf,UAA7B,YAA2C9B,EAA+B6C,EAAQL,cAA9BK,EAAQN,aACrE7B,MAAO,CACL0C,OAAQ,IAAF,OAAMvB,EAAMwB,QAAQ,IAC1BC,QAAS,EACTrF,OAAQ,UACRsF,SAAU,WAEZ,aAAYZ,EAAE,8BACd/E,QAAS,kBAjCf,WAGE,GAFAgF,GAAW5C,GAEPA,EAAQ,OACJwD,EAAU,UAAG3B,EAAM4B,UAAUC,cAAnB,aAAG,EAAwBC,KAE3ClG,EAAQmG,eAAelD,MAAMxC,MAAQsF,EAAWtF,MAChDT,EAAQmG,eAAelD,MAAMzC,OAASuF,EAAWvF,YAGjDR,EAAQmG,eAAelD,MAAMxC,MAAQ2F,EAAa3F,MAClDT,EAAQmG,eAAelD,MAAMzC,OAAS4F,EAAa5F,OAIrDzB,EAAIiD,MAAMqE,MAAKC,EAAAA,EAAAA,IAAenH,EAAY+C,aAAaC,0BAA2BtC,EAAU0C,IAkBzEgE,IACfL,KAAK,QAVP,UAYE,SAAClC,EAAD,QC9GD,IAAMoC,EAAe,CAC1B3F,MAAO,QACPD,OAAQ,SAOF3B,EAHEC,OAGFD,KAGAE,EAAqDF,EAArDE,IAAKC,EAAgDH,EAAhDG,MAAOwE,EAAyC3E,EAAzC2E,QAASvE,EAAgCJ,EAAhCI,aAAcwE,EAAkB5E,EAAlB4E,GAAIC,EAAc7E,EAAd6E,UAEvCrE,EAAyCL,EAAzCK,SAAUC,GAA+BN,EAA/BM,UAAWsE,GAAoB5E,EAApB4E,OAAQpE,GAAYR,EAAZQ,QAE7BqE,GAAaL,EAAbK,SAEA2C,GAA4BvH,EAA5BuH,aAAcC,GAAcxH,EAAdwH,UAEdC,GAAwCjD,EAAxCiD,cAAerB,GAAyB5B,EAAzB4B,SAAUlB,GAAeV,EAAfU,WAEzBF,GAA2BP,EAA3BO,uBAEFC,GAAYC,IAAW,SAACC,GAAD,MAAY,CACvCpE,QAAS,CACPS,MAAO2F,EAAa3F,MACpBD,OAAQ4F,EAAa5F,OACrB,qBAAsB,eACtB,kBAAmB,eACnB,gBAAiB,eACjB,iBAAkB,eAClBmG,WAAY,eACZ,YAAa,CACXC,QAAS,KACT1D,QAAS,QACTE,SAAU,WACV3C,MAAO,EACPD,OAAQ,EACRqG,UAAW,gCACXC,WAAY,yBACZvD,OAAQa,EAAMb,OAAOwD,OACrBC,MAAO,EACPtG,IAAK,QAqBJ,SAASuG,GAAYrH,GAC1B,IAAQsH,EAAwBtH,EAAxBsH,GAAIC,EAAoBvH,EAApBuH,IAAKpH,EAAeH,EAAfG,WAEjB,EAA8BV,IAA9B,eAAOW,EAAP,KAAgBoH,EAAhB,KAEMhC,EAAUlB,KAEVE,EAAQiB,KAGRgC,EAAkBX,GAActC,EAAMkD,YAAYC,GAAG,OAErDzH,EAAYf,EAAIiE,IAAIkE,GAAIlE,IACxBwE,EAAU1H,EAAUS,UAAYR,EAAa,EAAID,EAAUS,UAAYR,EAAa,EAElF0H,EAAkB1I,EAAIiE,IAAIkE,GAAIQ,QAA9BD,cAEFE,EAAc/D,GAAuB,MAE3CtE,IAAU,WAER,IAAMsI,EAAsBD,EAAYpC,QACpCqC,IACF/D,GAASyB,wBAAwBsC,GACjC/D,GAASgE,yBAAyBD,MAKnC,IAGH,IAAME,EAAmBtI,IACvB,kBACE,SAACgH,GAAD,CAEEf,UAAWL,EAAQpF,QACnB+H,OAAQjI,EAAUuB,YAClB2G,KAAMR,EACNL,IAAKA,EACLc,UAAU,EACVC,iBAAiB,EACjBC,iBAAiB,EACjBC,oBAAoB,EACpBC,aAAa,EACbC,YAAa,SAACC,GACZ,IAAMC,EAAkBD,EAAOpC,eAC/BtC,GAASgE,yBAAyBW,GACGA,EAAgBC,cACxBxF,MAAM0C,OAASvB,EAAMwB,QAAQ,GAE1DwB,EAAWmB,IAjBf,SAoBGvI,GACC,gCACGyH,EAAciB,OAAO1F,KAAI,SAAC2F,GAAD,OACxB,SAAClC,GAAD,CAAyBmC,IAAKD,EAAKC,KAAnBD,EAAKzB,QAEvB,SAACvH,EAAD,CAAeE,SAAUqH,EAAIpH,UAAWA,EAAWC,WAAYA,EAAYC,QAASA,KACpF,SAACgF,EAAD,CAAenF,SAAUqH,EAAIlH,QAASA,QAGxC,uBAKN,CAACF,EAAWqH,EAAKK,EAASzH,EAAYC,IAGxC,OAAOqH,GACL,gBACEpE,MAAO,CACLM,OAAQ,MAEVkC,UAAWxB,GAAuByB,SAJpC,UAME,gBAAKF,IAAKmC,EAAalC,UAAU,8BAAjC,SACGqC,OAIL,mB,ybCrJJ,IAAMe,GAAI/J,OAKJgK,GAAAA,SAAAA,I,+MAI2B,CAC7B,QAAS,GACT,QAAS,M,2BAMH,WACN,IAAQC,EAAU,EAAKC,YAAfD,MAMAhK,EAHS8J,GAAThK,KAGAE,IAER,EAAmEA,EAAIiE,IAAI+F,GAAnEE,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,WAAYC,EAA9B,EAA8BA,cAAeC,EAA7C,EAA6CA,kBAE7CrK,EACGiE,IAAI+F,GACJM,aACC,eACA,SAACpC,GAAD,CAAaC,GAAI6B,EAAOE,SAAUA,EAAU9B,IAAK+B,EAAWI,SAAUvJ,WAAYoJ,EAAcC,GAAmBrJ,iB,wCAOzH,WACE,IAAQgJ,EAAUQ,KAAKP,YAAfD,MAGSF,GAAThK,KAGAE,IAEJiE,IAAI+F,GAAOS,gBAAgB,mB,EA3C7BV,CAA0BW,EAAAA,IAiDhCZ,GAAEa,QAAUb,GAAEa,SAAW,GACzBb,GAAEa,QAAQ,iBAAkBC,EAAAA,EAAAA,IAA0Bb,M","sources":["webpack://geoview-core/../geoview-overview-map/src/minimap-bounds.tsx","webpack://geoview-core/../geoview-overview-map/src/minimap-toggle.tsx","webpack://geoview-core/../geoview-overview-map/src/overview-map.tsx","webpack://geoview-core/../geoview-overview-map/src/index.tsx"],"sourcesContent":["import { TypeWindow } from 'geoview-core';\nimport { payloadIsABoolean } from 'geoview-core/src/api/events/payloads/boolean-payload';\n\n// get window object\nconst w = window as TypeWindow;\n\n// access the cgpv object from the window object\nconst { cgpv } = w;\n\n// access the api calls\nconst { api, react, reactLeaflet, reactLeafletCore } = cgpv;\n\n// get event names\nconst EVENT_NAMES = api.eventNames;\n\n// get react functions\nconst { useState, useEffect, useCallback, useMemo } = react;\n\n// get react-leaflet events\nconst { useMapEvent } = reactLeaflet;\n\n// get react-leaflet/core events\nconst { useEventHandlers } = reactLeafletCore;\n\n/**\n * Interface for bound polygon properties\n */\ninterface MiniboundProps {\n  parentId: string;\n  parentMap: L.Map;\n  zoomFactor: number;\n  minimap: L.Map;\n}\n\n/**\n * Create and update the bound polygon of the parent's map extent\n * @param {MiniboundProps} props bound properties\n */\nexport function MinimapBounds(props: MiniboundProps): JSX.Element {\n  const { parentId, parentMap, zoomFactor, minimap } = props;\n\n  const [toggle, setToggle] = useState(false);\n\n  // Clicking a point on the minimap sets the parent's map center\n  const onClick = useCallback(\n    (e) => {\n      parentMap.setView(e.latlng, parentMap.getZoom());\n    },\n    [parentMap]\n  );\n  useMapEvent('click', onClick);\n\n  // Keep track of bounds in state to trigger renders\n  const [bounds, setBounds] = useState({\n    height: 0,\n    width: 0,\n    top: 0,\n    left: 0,\n  });\n\n  // Update the minimap's view to match the parent map's center and zoom\n  function updateMap(): void {\n    // Only perform an update if the minimap exist (has panes)\n    if (Object.keys(minimap.getPanes()).length) {\n      const newZoom = parentMap.getZoom() - zoomFactor > 0 ? parentMap.getZoom() - zoomFactor : 0;\n\n      minimap.flyTo(parentMap.getCenter(), newZoom);\n\n      // Set in timeout the calculation to create the bound so parentMap getBounds has the updated bounds\n      setTimeout(() => {\n        // Only run the function if the minimap exist (has panes)\n        if (Object.keys(minimap.getPanes()).length) {\n          minimap.invalidateSize();\n          const pMin = minimap.latLngToContainerPoint(parentMap.getBounds().getSouthWest());\n          const pMax = minimap.latLngToContainerPoint(parentMap.getBounds().getNorthEast());\n          setBounds({\n            height: pMin.y - pMax.y,\n            width: pMax.x - pMin.x,\n            top: pMax.y,\n            left: pMin.x,\n          });\n        }\n      }, 500);\n    }\n  }\n\n  useEffect(() => {\n    updateMap();\n\n    // listen to API event when the overview map is toggled\n    api.event.on(\n      EVENT_NAMES.OVERVIEW_MAP.EVENT_OVERVIEW_MAP_TOGGLE,\n      (payload) => {\n        if (payloadIsABoolean(payload)) {\n          if (parentId === payload.handlerName) {\n            updateMap();\n            setToggle(payload.status);\n          }\n        }\n      },\n      parentId\n    );\n\n    // remove the listener when the component unmounts\n    return () => {\n      api.event.off(EVENT_NAMES.OVERVIEW_MAP.EVENT_OVERVIEW_MAP_TOGGLE, parentId);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const onChange = useCallback(() => {\n    updateMap();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [minimap, parentMap, zoomFactor]);\n\n  // Listen to events on the parent map\n  const handlers = useMemo(() => ({ moveend: onChange, zoomend: onChange }), [onChange]);\n  const context = { __version: 1, map: parentMap };\n  const leafletElement = {\n    instance: parentMap,\n    context,\n  };\n  useEventHandlers(leafletElement, handlers);\n\n  return !toggle ? (\n    <div\n      style={{\n        left: `${bounds.left}px`,\n        top: `${bounds.top}px`,\n        width: `${bounds.width}px`,\n        height: `${bounds.height}px`,\n        display: 'block',\n        opacity: 0.5,\n        position: 'absolute',\n        border: '1px solid rgb(0, 0, 0)',\n        backgroundColor: 'rgba(0, 0, 0, 0.5)',\n        zIndex: 1000,\n      }}\n    />\n  ) : (\n    <div />\n  );\n}\n","import { TypeWindow } from 'geoview-core';\nimport { booleanPayload } from 'geoview-core/src/api/events/payloads/boolean-payload';\n\nimport { MINIMAP_SIZE } from './overview-map';\n\n// access window object\nconst w = window as TypeWindow;\n\n// access the cgpv object from the window object\nconst { cgpv } = w;\n\n// access the api calls\nconst { api, react, leaflet, ui, constants, useTranslation } = cgpv;\n\n// get event names\nconst EVENT_NAMES = api.eventNames;\n\n// get react functions\nconst { useState, useEffect, useRef } = react;\n\n// get leaflet events\nconst { DomEvent } = leaflet;\n\n// get available elements\nconst { IconButton, ChevronLeftIcon } = ui.elements;\n\n// get leaflet positions\nconst { leafletPositionClasses } = constants;\n\nconst useStyles = ui.makeStyles((theme) => ({\n  toggleBtn: {\n    transform: 'rotate(45deg)',\n    color: theme.palette.primary.contrastText,\n    zIndex: theme.zIndex.tooltip,\n    '&:hover': {\n      cursor: 'pointer',\n    },\n  },\n  toggleBtnContainer: {\n    zIndex: theme.zIndex.tooltip,\n  },\n  minimapOpen: {\n    transform: 'rotate(-45deg)',\n  },\n  minimapClosed: {\n    transform: 'rotate(135deg)',\n  },\n}));\n\n/**\n * Interface for the minimap toggle properties\n */\ninterface MinimapToggleProps {\n  parentId: string;\n  minimap: L.Map;\n}\n\n/**\n * Create a toggle element to expand/collapse the overview map\n * @param {MinimapToggleProps} props toggle properties\n * @return {JSX.Element} the toggle control\n */\nexport function MinimapToggle(props: MinimapToggleProps): JSX.Element {\n  const { parentId, minimap } = props;\n\n  const divRef = useRef<HTMLDivElement>(null);\n\n  const { t } = useTranslation();\n\n  const [status, setStatus] = useState(true);\n\n  const classes = useStyles();\n\n  const theme = ui.useTheme();\n\n  /**\n   * Toggle overview map to show or hide it\n   * @param e the event being triggered on click\n   */\n  function toggleMinimap(): void {\n    setStatus(!status);\n\n    if (status) {\n      const buttonSize = theme.overrides.button?.size;\n      // decrease size of overview map to the size of the toggle btn\n      minimap.getContainer().style.width = buttonSize.width;\n      minimap.getContainer().style.height = buttonSize.height;\n    } else {\n      // restore the size of the overview map\n      minimap.getContainer().style.width = MINIMAP_SIZE.width;\n      minimap.getContainer().style.height = MINIMAP_SIZE.height;\n    }\n\n    // trigger a new event when overview map is toggled\n    api.event.emit(booleanPayload(EVENT_NAMES.OVERVIEW_MAP.EVENT_OVERVIEW_MAP_TOGGLE, parentId, status));\n  }\n\n  useEffect(() => {\n    DomEvent.disableClickPropagation(divRef.current!);\n  }, []);\n\n  return (\n    <div ref={divRef} className={`${leafletPositionClasses.topright} ${classes.toggleBtnContainer}`}>\n      <IconButton\n        className={`leaflet-control ${classes.toggleBtn} ${!status ? classes.minimapOpen : classes.minimapClosed}`}\n        style={{\n          margin: `-${theme.spacing(3)}`,\n          padding: 0,\n          height: 'initial',\n          minWidth: 'initial',\n        }}\n        aria-label={t('mapctrl.overviewmap.toggle')}\n        onClick={() => toggleMinimap()}\n        size=\"large\"\n      >\n        <ChevronLeftIcon />\n      </IconButton>\n    </div>\n  );\n}\n","import { TypeWindow } from 'geoview-core';\n\nimport { MinimapBounds } from './minimap-bounds';\nimport { MinimapToggle } from './minimap-toggle';\n\nexport const MINIMAP_SIZE = {\n  width: '150px',\n  height: '150px',\n};\n\n// get the window object\nconst w = window as TypeWindow;\n\n// access the cgpv object from the window object\nconst { cgpv } = w;\n\n// access the api calls\nconst { api, react, leaflet, reactLeaflet, ui, constants } = cgpv;\n\nconst { useState, useEffect, useRef, useMemo } = react;\n\nconst { DomEvent } = leaflet;\n\nconst { MapContainer, TileLayer } = reactLeaflet;\n\nconst { useMediaQuery, useTheme, makeStyles } = ui;\n\nconst { leafletPositionClasses } = constants;\n\nconst useStyles = makeStyles((theme) => ({\n  minimap: {\n    width: MINIMAP_SIZE.width,\n    height: MINIMAP_SIZE.height,\n    '-webkit-transition': '300ms linear',\n    '-moz-transition': '300ms linear',\n    '-o-transition': '300ms linear',\n    '-ms-transition': '300ms linear',\n    transition: '300ms linear',\n    '&::before': {\n      content: '\"\"',\n      display: 'block',\n      position: 'absolute',\n      width: 0,\n      height: 0,\n      borderTop: '32px solid hsla(0,0%,98%,0.9)',\n      borderLeft: '32px solid transparent',\n      zIndex: theme.zIndex.appBar,\n      right: 0,\n      top: 0,\n    },\n  },\n}));\n\n/**\n * Interface for overview map properties\n */\ninterface OverviewMapProps {\n  id: string;\n  // eslint-disable-next-line react/no-unused-prop-types\n  language: string;\n  crs: L.CRS;\n  zoomFactor: number;\n}\n\n/**\n * Create the overview map component\n * @param {OverviewMapProps} props the overview map properties\n * @return {JSX.Element} the overview map component\n */\nexport function OverviewMap(props: OverviewMapProps): JSX.Element {\n  const { id, crs, zoomFactor } = props;\n\n  const [minimap, setMinimap] = useState<L.Map>();\n\n  const classes = useStyles();\n\n  const theme = useTheme();\n\n  // if screen size is medium and up\n  const deviceSizeMedUp = useMediaQuery(theme.breakpoints.up('md'));\n\n  const parentMap = api.map(id).map;\n  const mapZoom = parentMap.getZoom() - zoomFactor > 0 ? parentMap.getZoom() - zoomFactor : 0;\n\n  const { activeBasemap } = api.map(id).basemap;\n\n  const overviewRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    // disable events on container\n    const overviewHTMLElement = overviewRef.current;\n    if (overviewHTMLElement) {\n      DomEvent.disableClickPropagation(overviewHTMLElement);\n      DomEvent.disableScrollPropagation(overviewHTMLElement);\n    }\n\n    // remove ability to tab to the overview map\n    // overviewHTMLElement.children[0].setAttribute(\"tabIndex\", \"-1\");\n  }, []);\n\n  // Memorize the minimap so it's not affected by position changes\n  const minimapContainer = useMemo(\n    () => (\n      <MapContainer\n        // tabIndex={-1}\n        className={classes.minimap}\n        center={parentMap.getCenter()}\n        zoom={mapZoom}\n        crs={crs}\n        dragging={false}\n        doubleClickZoom={false}\n        scrollWheelZoom={false}\n        attributionControl={false}\n        zoomControl={false}\n        whenCreated={(cgpMap: L.Map) => {\n          const cgpMapContainer = cgpMap.getContainer();\n          DomEvent.disableScrollPropagation(cgpMapContainer);\n          const cgpMapContainerParentElement = cgpMapContainer.parentElement as HTMLElement;\n          cgpMapContainerParentElement.style.margin = theme.spacing(3);\n\n          setMinimap(cgpMap);\n        }}\n      >\n        {minimap ? (\n          <>\n            {activeBasemap.layers.map((base: { id: string | number | null | undefined; url: string }) => (\n              <TileLayer key={base.id} url={base.url} />\n            ))}\n            <MinimapBounds parentId={id} parentMap={parentMap} zoomFactor={zoomFactor} minimap={minimap} />\n            <MinimapToggle parentId={id} minimap={minimap} />\n          </>\n        ) : (\n          <div />\n        )}\n      </MapContainer>\n    ),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [parentMap, crs, mapZoom, zoomFactor, minimap]\n  );\n\n  return deviceSizeMedUp ? (\n    <div\n      style={{\n        zIndex: 1100,\n      }}\n      className={leafletPositionClasses.topright}\n    >\n      <div ref={overviewRef} className=\"leaflet-control leaflet-bar\">\n        {minimapContainer}\n      </div>\n    </div>\n  ) : (\n    <div />\n  );\n}\n","import { Cast, AbstractPluginClass, TypeJsonObject, TypeWindow } from 'geoview-core';\nimport { OverviewMap } from './overview-map';\n\nconst w = window as TypeWindow;\n\n/**\n * Create a class for the plugin instance\n */\nclass OverviewMapPlugin extends AbstractPluginClass {\n  /**\n   * translations object to inject to the viewer translations\n   */\n  translations: TypeJsonObject = {\n    'en-CA': {},\n    'fr-CA': {},\n  };\n\n  /**\n   * Added function called after the plugin has been initialized\n   */\n  added = (): void => {\n    const { mapId } = this.pluginProps;\n\n    // access the cgpv object from the window object\n    const { cgpv } = w;\n\n    // access the api calls\n    const { api } = cgpv;\n\n    const { language, projection, getMapOptions, currentProjection } = api.map(mapId);\n\n    api\n      .map(mapId)\n      .addComponent(\n        'overviewMap',\n        <OverviewMap id={mapId} language={language} crs={projection.getCRS()} zoomFactor={getMapOptions(currentProjection).zoomFactor!} />\n      );\n  };\n\n  /**\n   * Function called when the plugin is removed, used for clean up\n   */\n  removed(): void {\n    const { mapId } = this.pluginProps;\n\n    // access the cgpv object from the window object\n    const { cgpv } = w;\n\n    // access the api calls\n    const { api } = cgpv;\n\n    api.map(mapId).removeComponent('overviewMap');\n  }\n}\n\nexport default OverviewMapPlugin;\n\nw.plugins = w.plugins || {};\nw.plugins['overview-map'] = Cast<AbstractPluginClass>(OverviewMapPlugin);\n"],"names":["cgpv","window","api","react","reactLeaflet","reactLeafletCore","EVENT_NAMES","eventNames","useState","useEffect","useCallback","useMemo","useMapEvent","useEventHandlers","MinimapBounds","props","parentId","parentMap","zoomFactor","minimap","toggle","setToggle","onClick","e","setView","latlng","getZoom","height","width","top","left","bounds","setBounds","updateMap","Object","keys","getPanes","length","newZoom","flyTo","getCenter","setTimeout","invalidateSize","pMin","latLngToContainerPoint","getBounds","getSouthWest","pMax","getNorthEast","y","x","event","on","OVERVIEW_MAP","EVENT_OVERVIEW_MAP_TOGGLE","payload","payloadIsABoolean","handlerName","status","off","onChange","handlers","moveend","zoomend","instance","context","__version","map","style","display","opacity","position","border","backgroundColor","zIndex","leaflet","ui","constants","useTranslation","useRef","DomEvent","elements","IconButton","ChevronLeftIcon","leafletPositionClasses","useStyles","makeStyles","theme","toggleBtn","transform","color","palette","primary","contrastText","tooltip","cursor","toggleBtnContainer","minimapOpen","minimapClosed","MinimapToggle","divRef","t","setStatus","classes","useTheme","disableClickPropagation","current","ref","className","topright","margin","spacing","padding","minWidth","buttonSize","overrides","button","size","getContainer","MINIMAP_SIZE","emit","booleanPayload","toggleMinimap","MapContainer","TileLayer","useMediaQuery","transition","content","borderTop","borderLeft","appBar","right","OverviewMap","id","crs","setMinimap","deviceSizeMedUp","breakpoints","up","mapZoom","activeBasemap","basemap","overviewRef","overviewHTMLElement","disableScrollPropagation","minimapContainer","center","zoom","dragging","doubleClickZoom","scrollWheelZoom","attributionControl","zoomControl","whenCreated","cgpMap","cgpMapContainer","parentElement","layers","base","url","w","OverviewMapPlugin","mapId","pluginProps","language","projection","getMapOptions","currentProjection","addComponent","getCRS","this","removeComponent","AbstractPluginClass","plugins","Cast"],"sourceRoot":""}