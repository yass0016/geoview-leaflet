{"version":3,"file":"corePackages/geoview-basemap-panel.js","mappings":"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","sources":["webpack://geoview-core/../geoview-basemap-panel/src/basemap-panel.tsx","webpack://geoview-core/../geoview-basemap-panel/src/index.tsx"],"sourcesContent":["import { TypeBasemapProps, TypeBasemapOptions, TypeJsonObject, TypeWindow } from 'geoview-core';\n\nconst w = window as TypeWindow;\n\ninterface BaseMapPanelProps {\n  mapId: string;\n  config: TypeJsonObject;\n}\n\nexport function BasemapPanel(props: BaseMapPanelProps): JSX.Element {\n  const { mapId, config } = props;\n\n  const { cgpv } = w;\n\n  const { api, react, ui } = cgpv;\n\n  const { useState, useEffect } = react;\n\n  const useStyles = ui.makeStyles(() => ({\n    listContainer: {\n      overflowY: 'scroll',\n      height: '600px',\n    },\n    card: {\n      boxShadow: '0 4px 8px 0 rgba(0, 0, 0, 0.2)',\n      transition: '0.3s',\n      borderRadius: '5px',\n      '&:hover': {\n        boxShadow: '0 8px 16px 0 rgba(0, 0, 0, 0.2)',\n      },\n      marginBottom: 10,\n      height: '250px',\n      width: '100%',\n      display: 'block',\n      position: 'relative',\n    },\n    thumbnail: {\n      borderRadius: '5px',\n      position: 'absolute',\n      height: '100%',\n      width: '100%',\n      opacity: 0.8,\n    },\n    container: {\n      background: 'rgba(0,0,0,.68)',\n      color: '#fff',\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      height: '40px',\n      display: 'flex',\n      alignItems: 'center',\n      padding: '0 5px',\n      boxSizing: 'border-box',\n      position: 'absolute',\n      left: 0,\n      bottom: 0,\n      width: 'inherit',\n    },\n  }));\n\n  const [basemapList, setBasemapList] = useState<TypeBasemapProps[]>([]);\n\n  const classes = useStyles();\n\n  /**\n   * Update the basemap with the layers on the map\n   *\n   * @param {string} id update the basemap on the map\n   */\n  const setBasemap = (id: string) => {\n    api.map(mapId).basemap.setBasemap(id);\n  };\n\n  /**\n   * load existing basemaps and create new basemaps\n   */\n  useEffect(() => {\n    // reset the basemaps array\n    api.map(mapId).basemap.basemaps = [];\n\n    // get existing basemaps\n    const { basemaps } = api.map(mapId).basemap;\n\n    // create the core basemap\n    for (let basemapIndex = 0; basemapIndex < config.coreBasemaps.length; basemapIndex++) {\n      const basemap = config.coreBasemaps[basemapIndex] as TypeJsonObject;\n      api.map(mapId).basemap.createCoreBasemap(basemap as unknown as TypeBasemapOptions);\n    }\n\n    // create the custom config basemap\n    for (let basemapIndex = 0; basemapIndex < config.customBasemaps.length; basemapIndex++) {\n      const customBasemap = config.customBasemaps[basemapIndex] as TypeJsonObject;\n      api.map(mapId).basemap.createCustomBasemap(customBasemap as unknown as TypeBasemapProps);\n    }\n\n    // set the basemaps in the list\n    setBasemapList(basemaps);\n  }, [api, config.coreBasemaps, config.customBasemaps, mapId]);\n\n  return (\n    <div className={classes.listContainer}>\n      {basemapList.map((basemap: TypeBasemapProps) => {\n        return (\n          <div\n            role=\"button\"\n            tabIndex={0}\n            className={classes.card}\n            onClick={() => setBasemap(basemap.id as string)}\n            onKeyPress={() => setBasemap(basemap.id as string)}\n            key={basemap.id}\n          >\n            {typeof basemap.thumbnailUrl === 'string' && (\n              <img src={basemap.thumbnailUrl} alt={basemap.altText} className={classes.thumbnail} />\n            )}\n            {Array.isArray(basemap.thumbnailUrl) &&\n              basemap.thumbnailUrl.map((thumbnail, index) => {\n                // eslint-disable-next-line react/no-array-index-key\n                return <img key={index} src={thumbnail} alt={basemap.altText} className={classes.thumbnail} />;\n              })}\n            <div className={classes.container}>{basemap.name}</div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","import {\n  Cast,\n  AbstractPluginClass,\n  TypePluginOptions,\n  TypeIconButtonProps,\n  TypeButtonPanel,\n  TypeWindow,\n  toJsonObject,\n  TypePanelProps,\n  TypeSchemaObject,\n  TypeJsonObject,\n} from 'geoview-core';\n\nimport { BasemapPanel } from './basemap-panel';\nimport schema from '../schema.json';\nimport defaultConfig from '../default-config-basemap-panel.json';\n\nconst w = window as TypeWindow;\n\n/**\n * Create a class for the plugin instance\n */\nclass BasemapPanelPlugin extends AbstractPluginClass {\n  // store the created button panel object\n  buttonPanel: TypeButtonPanel | null;\n\n  constructor(id: string, props: TypePluginOptions) {\n    super(id, props);\n    this.buttonPanel = null;\n  }\n\n  /**\n   * Return the package schema\n   *\n   * @returns {TypeSchemaObject} the package schema\n   */\n  schema = (): TypeSchemaObject => schema;\n\n  /**\n   * Return the default config for this package\n   *\n   * @returns {TypeJsonObject} the default config\n   */\n  defaultConfig = (): TypeJsonObject => toJsonObject(defaultConfig);\n\n  /**\n   * translations object to inject to the viewer translations\n   */\n  translations = toJsonObject({\n    'en-CA': {\n      basemapPanel: 'Basemaps',\n    },\n    'fr-CA': {\n      basemapPanel: 'Fond de carte',\n    },\n  });\n\n  /**\n   * Added function called after the plugin has been initialized\n   */\n  added = (): void => {\n    const { configObj, pluginProps } = this;\n\n    const { mapId } = pluginProps;\n\n    // access the cgpv object from the window object\n    const { cgpv } = w;\n\n    if (cgpv) {\n      // access the api calls\n      const { api, ui } = cgpv;\n      const { MapIcon } = ui.elements;\n      const { language } = api.map(mapId);\n      // button props\n      const button: TypeIconButtonProps = {\n        id: 'basemapPanelButton',\n        tooltip: this.translations[language].basemapPanel as string,\n        tooltipPlacement: 'right',\n        children: <MapIcon />,\n        visible: true,\n      };\n\n      // panel props\n      const panel: TypePanelProps = {\n        title: this.translations[language].basemapPanel,\n        icon: '<i class=\"material-icons\">map</i>',\n        width: 200,\n        status: configObj?.isOpen as boolean,\n      };\n\n      // create a new button panel on the appbar\n      this.buttonPanel = api.map(mapId).appBarButtons.createAppbarPanel(button, panel, null);\n\n      // set panel content\n      this.buttonPanel?.panel?.changeContent(<BasemapPanel mapId={mapId} config={configObj || {}} />);\n    }\n  };\n\n  /**\n   * Function called when the plugin is removed, used for clean up\n   */\n  removed(): void {\n    const { mapId } = this.pluginProps;\n\n    // access the cgpv object from the window object\n    const { cgpv } = w;\n\n    if (cgpv) {\n      // access the api calls\n      const { api } = cgpv;\n\n      if (this.buttonPanel) {\n        api.map(mapId).appBarButtons.removeAppbarPanel(this.buttonPanel.id);\n\n        // reset basemaps array\n        api.map(mapId).basemap.basemaps = [];\n        // reload default basemap\n        api.map(mapId).basemap.loadDefaultBasemaps(api.map(mapId).basemap.basemapOptions);\n      }\n    }\n  }\n}\n\nexport default BasemapPanelPlugin;\n\nw.plugins = w.plugins || {};\nw.plugins['basemap-panel'] = Cast<AbstractPluginClass>(BasemapPanelPlugin);\n"],"names":["w","window","BasemapPanel","props","mapId","config","cgpv","api","react","ui","useState","useEffect","useStyles","makeStyles","listContainer","overflowY","height","card","boxShadow","transition","borderRadius","marginBottom","width","display","position","thumbnail","opacity","container","background","color","overflow","textOverflow","alignItems","padding","boxSizing","left","bottom","basemapList","setBasemapList","classes","setBasemap","id","map","basemap","basemaps","basemapIndex","coreBasemaps","length","createCoreBasemap","customBasemaps","customBasemap","createCustomBasemap","className","role","tabIndex","onClick","onKeyPress","thumbnailUrl","src","alt","altText","Array","isArray","index","name","BasemapPanelPlugin","schema","toJsonObject","defaultConfig","basemapPanel","configObj","pluginProps","MapIcon","elements","language","button","tooltip","translations","tooltipPlacement","children","visible","panel","title","icon","status","isOpen","buttonPanel","appBarButtons","createAppbarPanel","changeContent","this","removeAppbarPanel","loadDefaultBasemaps","basemapOptions","AbstractPluginClass","plugins","Cast"],"sourceRoot":""}